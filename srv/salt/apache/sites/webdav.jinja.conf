{% set extauthname = site.replace('.', '-').replace('-', '_') %}

<VirtualHost {{ip}}:{{port}}>
    DefineExternalAuth mnauth_{{extauthname}} pipe \
        "/usr/local/bin/mn-authclient.py -u https://{{auth_url}}/checkpassword/ \
            -m authext --ca-file /etc/ssl/certs/ca-certificates.crt \
            --jwtkey {{jwtkey}}"

    DefineExternalGroup mngroup_{{extauthname}} pipe \
        "/usr/local/bin/mn-authclient.py -u https://{{auth_url}}/checkpassword/ \
            -m authextgroup --ca-file /etc/ssl/certs/ca-certificates.crt \
            --jwtkey {{jwtkey}}"

    {# SSL is terminated via HAProxy #}
    {# SSLEngine On #}
    {# SSLCertificateFile {{cert}} #}
    {# SSLCertificateKeyFile {{certkey}} #}
    ServerName {{site}}

    DocumentRoot /secure/webdav/{{site}}/
    ErrorLog /secure/webdav/{{site}}/logs/error_log.webdav
    CustomLog /secure/webdav/{{site}}/logs/access_log.webdav combined

    AcceptPathInfo On

    DavLockDB /secure/webdav/{{site}}/webdav.lockdb

    <Directory /secure/webdav/{{site}}/logs/>
        Deny from all
    </Directory>

    {% for folderdef in folders %}
        {% for foldername, folder in folderdef.items() %}
            <Directory /secure/webdav/{{site}}/{{foldername}}/>
                DAV On
                DavDepthInfinity On

                # wait for OpenID connect support in django-oauth-toolkit, then use
                # libapache2-mod-auth-openidc as the auth backend
                AuthType Basic
                AuthName "{{authrealm}}"
                AuthBasicProvider external
                AuthExternal mnauth_{{extauthname}}
                GroupExternal mngroup_{{extauthname}}
                Options Indexes
                <Limit HEAD GET POST OPTIONS PROPFIND>
                    require external-group {% for sc in folder.get('readonly-scopes', []) %}{{sc}} {% endfor %}{% for sc in folder.get('write-scopes', []) %}{{sc}} {% endfor %}
                </Limit>
                <Limit MKCOL PUT DELETE LOCK UNLOCK COPY MOVE PROPPATCH>
                    require external-group {% for sc in folder.get('write-scopes', []) %}{{sc}} {% endfor %}
                </Limit>
            </Directory>
        {% endfor %}
    {% endfor %}
</VirtualHost>
