# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure('2') do |config|

    $box_url = 'https://s3-eu-central-1.amazonaws.com/jdelic/maurusnet-debian.box'

    # When I'm on a train or plane I like to use a local Debian mirror that I run off a Micro SD Card.
    # The shell script below sets a Debian VM to load everything from there when you set $local_provision
    # to true.
    $local_provision = false
    $remote_provision_script = <<SCRIPT
        wget -O - https://repo.saltstack.com/apt/debian/9/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add -
        sh -c 'echo deb http://repo.saltstack.com/apt/debian/9/amd64/latest stretch main > /etc/apt/sources.list.d/saltstack.list'
        apt-get update
SCRIPT
    $local_provision_script = <<SCRIPT
        sh -c 'echo 192.168.56.10 fileserver.maurusnet.test httpredir.debian.org >> /etc/hosts'
        sh -c 'echo deb http://fileserver.maurusnet.test/debian/ stretch main > /etc/apt/sources.list'
        sh -c 'echo deb http://fileserver.maurusnet.test/apt/debian/9/amd64/latest stretch main > /etc/apt/sources.list.d/saltstack.list'
        wget -q -O - http://fileserver.maurusnet.test/dev_apt_signing.public.pgp | apt-key add -
        apt-get update
        sh -c 'apt-get install ca-certificates'
        sh -c 'mkdir -p /usr/share/ca-certificates/local'
        sh -c 'if ! grep -q maurusnet-rootca /etc/ca-certificates.conf; then echo local/maurusnet-rootca.crt >> /etc/ca-certificates.conf; fi'
        sh -c 'cat > /usr/share/ca-certificates/local/maurusnet-rootca.crt << EOF
-----BEGIN CERTIFICATE-----
MIIGsDCCBJigAwIBAgIJAJyAuGARvj7KMA0GCSqGSIb3DQEBCwUAMIHkMQswCQYD
VQQGEwJERTEPMA0GA1UEBwwGTXVuaWNoMR0wGwYDVQQKDBRtYXVydXMubmV0d29y
a3MgR21iSDEfMB0GA1UECwwWTWFzdGVyIENvbnRyb2wgUHJvZ3JhbTEvMC0GA1UE
AwwmbWF1cnVzLm5ldHdvcmtzIE1hc3RlciBDb250cm9sIFByb2dyYW0xHDAaBgkq
hkiG9w0BCQEWDWNhQG1hdXJ1cy5uZXQxNTAzBgkqhkiG9w0BCQIMJm1hdXJ1cy5u
ZXR3b3JrcyBNYXN0ZXIgQ29udHJvbCBQcm9ncmFtMB4XDTE2MDcyMTIzMTUwNFoX
DTM2MDcxNjIzMTUwNFowgeQxCzAJBgNVBAYTAkRFMQ8wDQYDVQQHDAZNdW5pY2gx
HTAbBgNVBAoMFG1hdXJ1cy5uZXR3b3JrcyBHbWJIMR8wHQYDVQQLDBZNYXN0ZXIg
Q29udHJvbCBQcm9ncmFtMS8wLQYDVQQDDCZtYXVydXMubmV0d29ya3MgTWFzdGVy
IENvbnRyb2wgUHJvZ3JhbTEcMBoGCSqGSIb3DQEJARYNY2FAbWF1cnVzLm5ldDE1
MDMGCSqGSIb3DQEJAgwmbWF1cnVzLm5ldHdvcmtzIE1hc3RlciBDb250cm9sIFBy
b2dyYW0wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCqa03wXbmhBotm
2wbLx4k/KepIsyZy7gn1S4hFh/GnvuiSExMeeThIL6oijOWxO8cBq4rtff2KRQ4U
j77NYajbgn9lFmVOc8jqPD1+tDx+rDXvtx8eOFOp+P6OxB8GhJxzik1YMEU9yFul
HbDUI3g6BBUtTNbfPYMgREIkQegm9WXy7jEk5W9qne8ocR3xebQ0PoU1KMQJBrUt
4I9DHLIgPQk7F8vC9SzEtQMAOmuTIOPZe27J0ijdbEormnQpPaVF6zneIwWgysZn
62gICVqn/Jz00U9zwIfmVo2DKcvyIShXsVQONRWciCawzfuLyrWNDMRQymU3jERS
b1cOJlPQd6CpeVOZKbb+ForYsN20YO++9qrYtO6xQVyHi/P84+oGaI+Dre/2KwJi
Bt4SLeJVUV4Y3d/fxystDAd+7ZSb/+6rXM0f8gQsB+PUSw3hWEMxNSZv4EnukhX4
54EIFDg+zUufu5OuF0llIbQBW2rp25wbbaC7lMbgHadraFmg6bYp8rYSNQZMfug9
dzGTZdXT9aaKOl174NNMN7QVeC423gk5otaIGCAAjAzwgCke8Js4h5BVz/M+fP3c
X3lRxcv8Styg7EzE+OhlhI8/DPbFvWbBIkFRlOcseBZwFo3epQNsOVVnF79Hjd4I
WtrPIWFCsclTz9nUj8gPFau+TeNCkwIDAQABo2MwYTAdBgNVHQ4EFgQUqH8Q4+HX
b6Qh0RU013LdlhZHsecwHwYDVR0jBBgwFoAUqH8Q4+HXb6Qh0RU013LdlhZHsecw
DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQAD
ggIBAIwR8gkjAfWy3eDEoT7+0jCr+sCZUTXje34TGmwX/Hq50zQFW63LFbATtYgR
2go9YA1ihCpeQ1h1VRB1J43r0j6uqu3dHEn1GwUH8Aioj0LckpoBnPIMaxbL3gmD
ERD1W8DyjrBqzumNlKxC126yMzIJYSy9ej3j5Tqn1Y27kblU1A+fVkK9F+vEpiQf
VzoNsHe2APENKPxTE2twrlkLcJJLrGluFj8MDf0QkSOR9RkMCW8yhywyhdgTJKVy
+Qu/o8mM1BF3FjJrDU2nHfC+PdxrZXhl1n03vEzr7zdoA791GiEB/wZmXji+9THH
RDB1XrqHljwseCYqXnBg1Heq/14xNt18ec7flay55pofqZzKD/gmNjj4c4kV2yjh
ImqogK/32j7P8tVBomVdk6EhD8JTV1nINBmIX9uRJirw2Uf6g4XpfvJDhcW/KcWN
DNI+zgBzUVw7b/x8JMUj3uH334hplm8SdFFkat/CieCtrMMHZhH6v4YrOQAulIh3
ugTOmBfjBrLkRZDDY8WgMwyaSjH0enjENgZBaIlbCvZP4GnpC0716dMXKdF25ZXF
BnoXfELNX1wsiqiMFcGBQlGReN/u6KyLSzP8OiWNYnfk7jkFGdU3SITQP+vfKN6q
LT3JzWgyD0oWFp7ASoxVoe4Q2Yq479PiubIy6wgz17F060cF
-----END CERTIFICATE-----
EOF'
        sh -c 'update-ca-certificates'
SCRIPT

    config.ssh.insert_key = false
    config.ssh.forward_agent = true

    config.vm.define :master do |master|
        master.vm.provider :virtualbox do |vb|
            vb.customize ['modifyvm', :id, '--rtcuseutc', 'on']
        end

        master.vm.box = 'maurusnet-debian'
        master.vm.box_url = $box_url
        master.vm.network :private_network, ip: '192.168.56.88'
        master.vm.hostname = 'saltmaster.maurusnet.test'

        master.vm.synced_folder 'saltshaker/srv/salt', '/srv/salt'
        master.vm.synced_folder 'saltshaker/srv/salt-modules', '/srv/salt-modules'
        master.vm.synced_folder 'saltshaker/srv/pillar', '/srv/pillar'
        master.vm.synced_folder 'saltshaker/srv/reactor', '/srv/reactor'
        master.vm.synced_folder 'saltshaker/etc/salt-minion/minion.d', '/etc/salt/minion.d'
        master.vm.synced_folder 'saltshaker/etc/salt-master/master.d', '/etc/salt/master.d'

        master.vm.provision :shell do |s|
            if $local_provision
                s.inline = $local_provision_script
            else
                s.inline = $remote_provision_script
            end
            s.inline += <<SCRIPT
                mkdir -p /etc/salt/roles.d
                touch /etc/salt/roles.d/master
                touch /etc/salt/roles.d/vault
                touch /etc/salt/roles.d/consulserver
                touch /etc/salt/roles.d/database
                touch /etc/salt/roles.d/authserver
SCRIPT
        end

        master.vm.provision :salt do |salt|
            salt.run_highstate = false
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = true
            salt.always_install = true
            salt.install_master = true
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options = "-l -R fileserver.maurusnet.test"
            end
            salt.master_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.master_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
            salt.seed_master = {
                'saltmaster.maurusnet.test' => salt.minion_pub,
                'test.maurusnet.test' => 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pub'
            }
        end

        master.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = false
            salt.always_install = true
            salt.install_master = false
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options = "-l -R fileserver.maurusnet.test"
            end
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
        end

        # We have to restart salt-minion because the master's hostname is set in minion.d
        # on a vboxsf mount when we bring the box back up after a 'vagrant halt'.
        # We have to restart salt-master because the dynamicsecrets pillar is on the same
        # vboxsf mount and needs to be loaded.
        master.vm.provision :shell, run: 'always' do |s|
            s.inline = 'systemctl restart salt-master;'
            s.inline += 'systemctl restart salt-minion; sleep 1'
        end
    end

    config.vm.define :test do |test|
        test.vm.provider :virtualbox do |vb|
            vb.customize ['modifyvm', :id, '--rtcuseutc', 'on']
        end

        test.vm.box = 'maurusnet-debian'
        test.vm.box_url = $box_url
        test.vm.network :private_network, ip: '192.168.56.162'
        test.vm.network :private_network, ip: '192.168.56.163'
        test.vm.network :private_network, ip: '192.168.56.164'
        test.vm.hostname = 'test.maurusnet.test'

        test.vm.synced_folder 'saltshaker/etc/salt-minion/minion.d', '/etc/salt/minion.d'

        test.vm.provision :shell do |s|
            if $local_provision
                s.inline = $local_provision_script
            else
                s.inline = $remote_provision_script
            end
            s.inline += <<SCRIPT
                sh -c 'if ! grep -q 192.168.56.88 /etc/hosts; then echo "192.168.56.88        saltmaster.maurusnet.test saltmaster" >> /etc/hosts; fi'
                mkdir -p /etc/salt/roles.d
                chown 700 /etc/salt/roles.d
                touch /etc/salt/roles.d/mail
                touch /etc/salt/roles.d/pim
                touch /etc/salt/roles.d/dev
                touch /etc/salt/roles.d/buildserver
                touch /etc/salt/roles.d/buildworker
                touch /etc/salt/roles.d/apps
                touch /etc/salt/roles.d/loadbalancer
                chown 600 /etc/salt/roles.d/*
SCRIPT
        end

        test.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = false
            salt.always_install = false
            salt.install_master = false
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options = "-l -R fileserver.maurusnet.test"
            end
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pem'
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pub'
        end

        # we have to restart salt-minion because the master's hostname is set in minion.d
        # on a vboxsf mount when we bring the box back up after a 'vagrant halt'
        test.vm.provision :shell, run: 'always' do |s|
            s.inline = 'systemctl restart salt-minion; sleep 1'
        end
    end

    # config.vm.define :dev do |dev|
        # # see https://github.com/mitchellh/vagrant/issues/912
        # dev.vm.provider :virtualbox do |vb|
            # vb.customize ['modifyvm', :id, '--rtcuseutc', 'on']
            # #vb.customize ['modifyvm', :id, '--nictype1', 'Am79C973']
            # #vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
            # #vb.gui = true
            # #vb.customize ['modifyvm', :id, '--memory', '1024']
        # end

        # # Every Vagrant virtual environment requires a box to build off of.
        # dev.vm.box = 'maurusnet-debian'

        # # The url from where the 'dev.vm.box' box will be fetched if you
        # # don't have it already.
        # dev.vm.box_url = $box_url

        # # Create a private network, which allows host-only access to the machine
        # # using a specific IP.
        # dev.vm.network :private_network, ip: '192.168.56.160'

        # # set up key forwarding for GIT
        # config.ssh.forward_agent = true
        # #config.ssh.max_tries = 150

        # dev.vm.hostname = 'dev.maurus.net.test'

        # dev.vm.provision :shell do |s|
            # s.inline = $salt_script
        # end

        # dev.vm.provision :salt do |salt|
            # salt.run_highstate = true
            # # we installed using the shell provisioner above, because
            # # bootstrap_salt.sh is broken on Debian 7
            # salt.no_minion = true
            # salt.verbose = true
            # salt.minion_config = 'z:/saltshaker/etc/salt-minion/minion'
            # salt.minion_key = 'z:/saltshaker/vagrant/preseed-keys/dev.maurus.net.pem'
            # salt.minion_pub = 'z:/saltshaker/vagrant/preseed-keys/dev.maurus.net.pub'
        # end
    # end

    # config.vm.define :db do |db|
        # db.vm.provider :virtualbox do |vb|
            # vb.customize ['modifyvm', :id, '--rtcuseutc', 'on']
        # end

        # db.vm.box = 'maurusnet-debian'
        # db.vm.box_url = $box_url
        # db.vm.network :private_network, ip: '192.168.56.161'
        # config.ssh.forward_agent = true
        # db.vm.hostname = 'db.maurusnet.internal.test'

        # db.vm.provision :shell do |s|
            # s.inline = $salt_script
        # end

        # db.vm.provision :salt do |salt|
            # salt.run_highstate = true
            # salt.no_minion = true
            # salt.minion_config = 'z:/saltshaker/etc/salt-minion/minion'
            # salt.minion_key = 'z:/saltshaker/vagrant/preseed-keys/db.maurusnet.internal.pem'
            # salt.minion_pub = 'z:/saltshaker/vagrant/preseed-keys/db.maurusnet.internal.pub'
        # end
    # end

end
