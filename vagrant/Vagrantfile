# -*- mode: ruby -*-
# vi: set ft=ruby :

# detect OS
module OS
    def OS.windows?
        (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
    end

    def OS.mac?
        (/darwin/ =~ RUBY_PLATFORM) != nil
    end

    def OS.unix?
        !OS.windows?
    end

    def OS.linux?
        OS.unix? and not OS.mac?
    end
end


# helper to enure no_root_squash which will otherwise prevent libvirt to host mounting
def sync_folder(vmref, folder, hostpath, mounttype: nil)
    if OS.windows? or OS.mac?
        vmref.vm.synced_folder folder, hostpath
    else
        $mtype = nil
        if mounttype == nil
            $mtype = 'nfs'
        else
            $mtype = mounttype
        end
        # add no_root_squash to all folders
        vmref.vm.synced_folder folder, hostpath, type: $mtype,
                               linux__nfs_options: ['rw','no_subtree_check','all_squash','no_root_squash'],
                               nfs_version: 4,
                               nfs_udp: false
    end
end


def ip(d)
    if OS.windows?
        "192.168.56." + d
    else
        "192.168.123." + d
    end
end

def ip6(d)
    if OS.windows?
        "fd00:56::" + d
    else
        "fd00:123::" + d
    end
end

# When I'm on a train or plane I like to use a local Debian mirror that I run off a Micro SD Card.
# The shell script below sets a Debian VM to load everything from there when you set $local_provision
# to true.
$local_provision = false
$remote_provision_script = <<SCRIPT
        apt update
        apt install -y --no-install-recommends gnupg
        mkdir -p /etc/apt/keyrings
        #wget -O /etc/apt/keyrings/salt-archive-keyring-2023.gpg.tmp https://packages.broadcom.com/artifactory/api/security/keypair/SaltProjectKey/public
        #gpg --dearmor -o /etc/apt/keyrings/salt-archive-keyring-2023.gpg /etc/apt/keyrings/salt-archive-keyring-2023.gpg.tmp
        #rm /etc/apt/keyrings/salt-archive-keyring-2023.gpg.tmp
        #sh -c 'echo deb [signed-by=/etc/apt/keyrings/salt-archive-keyring-2023.gpg arch=amd64] https://packages.broadcom.com/artifactory/saltproject-deb/ stable main > /etc/apt/sources.list.d/salt.list'
        wget -O /etc/apt/keyrings/maurusnet-package-archive.gpg.tmp https://s3.eu-central-1.amazonaws.com/repo.maurus.net/02CBD940A78049AF.pem
        gpg --dearmor -o /etc/apt/keyrings/maurusnet-package-archive.gpg /etc/apt/keyrings/maurusnet-package-archive.gpg.tmp
        rm /etc/apt/keyrings/maurusnet-package-archive.gpg.tmp
        sh -c 'echo deb [signed-by=/etc/apt/keyrings/maurusnet-package-archive.gpg arch=amd64] http://repo.maurus.net/saltmirror/bookworm/ saltmirror main > /etc/apt/sources.list.d/salt.list'
        apt update
        groupadd -g 110 salt
        useradd -g salt -M -d /opt/saltstack/salt -s /usr/sbin/nologin salt
SCRIPT
$local_provision_script = <<SCRIPT
        sh -c 'echo 192.168.56.10 fileserver.maurusnet.test httpredir.debian.org >> /etc/hosts'
        sh -c 'echo deb http://fileserver.maurusnet.test/debian/ bullseye main > /etc/apt/sources.list'
        sh -c 'echo deb http://fileserver.maurusnet.test/apt/debian/11/amd64/latest bullseye main > /etc/apt/sources.list.d/saltstack.list'
        wget -q -O - http://fileserver.maurusnet.test/dev_apt_signing.public.pgp | apt-key add -
        apt-get update
        sh -c 'apt-get install ca-certificates'
        sh -c 'mkdir -p /usr/share/ca-certificates/local'
        sh -c 'if ! grep -q maurusnet-rootca /etc/ca-certificates.conf; then echo local/maurusnet-rootca.crt >> /etc/ca-certificates.conf; fi'
        sh -c 'cat > /usr/share/ca-certificates/local/maurusnet-rootca.crt << EOF
-----BEGIN CERTIFICATE-----
MIIGsDCCBJigAwIBAgIJAJyAuGARvj7KMA0GCSqGSIb3DQEBCwUAMIHkMQswCQYD
VQQGEwJERTEPMA0GA1UEBwwGTXVuaWNoMR0wGwYDVQQKDBRtYXVydXMubmV0d29y
a3MgR21iSDEfMB0GA1UECwwWTWFzdGVyIENvbnRyb2wgUHJvZ3JhbTEvMC0GA1UE
AwwmbWF1cnVzLm5ldHdvcmtzIE1hc3RlciBDb250cm9sIFByb2dyYW0xHDAaBgkq
hkiG9w0BCQEWDWNhQG1hdXJ1cy5uZXQxNTAzBgkqhkiG9w0BCQIMJm1hdXJ1cy5u
ZXR3b3JrcyBNYXN0ZXIgQ29udHJvbCBQcm9ncmFtMB4XDTE2MDcyMTIzMTUwNFoX
DTM2MDcxNjIzMTUwNFowgeQxCzAJBgNVBAYTAkRFMQ8wDQYDVQQHDAZNdW5pY2gx
HTAbBgNVBAoMFG1hdXJ1cy5uZXR3b3JrcyBHbWJIMR8wHQYDVQQLDBZNYXN0ZXIg
Q29udHJvbCBQcm9ncmFtMS8wLQYDVQQDDCZtYXVydXMubmV0d29ya3MgTWFzdGVy
IENvbnRyb2wgUHJvZ3JhbTEcMBoGCSqGSIb3DQEJARYNY2FAbWF1cnVzLm5ldDE1
MDMGCSqGSIb3DQEJAgwmbWF1cnVzLm5ldHdvcmtzIE1hc3RlciBDb250cm9sIFBy
b2dyYW0wggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCqa03wXbmhBotm
2wbLx4k/KepIsyZy7gn1S4hFh/GnvuiSExMeeThIL6oijOWxO8cBq4rtff2KRQ4U
j77NYajbgn9lFmVOc8jqPD1+tDx+rDXvtx8eOFOp+P6OxB8GhJxzik1YMEU9yFul
HbDUI3g6BBUtTNbfPYMgREIkQegm9WXy7jEk5W9qne8ocR3xebQ0PoU1KMQJBrUt
4I9DHLIgPQk7F8vC9SzEtQMAOmuTIOPZe27J0ijdbEormnQpPaVF6zneIwWgysZn
62gICVqn/Jz00U9zwIfmVo2DKcvyIShXsVQONRWciCawzfuLyrWNDMRQymU3jERS
b1cOJlPQd6CpeVOZKbb+ForYsN20YO++9qrYtO6xQVyHi/P84+oGaI+Dre/2KwJi
Bt4SLeJVUV4Y3d/fxystDAd+7ZSb/+6rXM0f8gQsB+PUSw3hWEMxNSZv4EnukhX4
54EIFDg+zUufu5OuF0llIbQBW2rp25wbbaC7lMbgHadraFmg6bYp8rYSNQZMfug9
dzGTZdXT9aaKOl174NNMN7QVeC423gk5otaIGCAAjAzwgCke8Js4h5BVz/M+fP3c
X3lRxcv8Styg7EzE+OhlhI8/DPbFvWbBIkFRlOcseBZwFo3epQNsOVVnF79Hjd4I
WtrPIWFCsclTz9nUj8gPFau+TeNCkwIDAQABo2MwYTAdBgNVHQ4EFgQUqH8Q4+HX
b6Qh0RU013LdlhZHsecwHwYDVR0jBBgwFoAUqH8Q4+HXb6Qh0RU013LdlhZHsecw
DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQAD
ggIBAIwR8gkjAfWy3eDEoT7+0jCr+sCZUTXje34TGmwX/Hq50zQFW63LFbATtYgR
2go9YA1ihCpeQ1h1VRB1J43r0j6uqu3dHEn1GwUH8Aioj0LckpoBnPIMaxbL3gmD
ERD1W8DyjrBqzumNlKxC126yMzIJYSy9ej3j5Tqn1Y27kblU1A+fVkK9F+vEpiQf
VzoNsHe2APENKPxTE2twrlkLcJJLrGluFj8MDf0QkSOR9RkMCW8yhywyhdgTJKVy
+Qu/o8mM1BF3FjJrDU2nHfC+PdxrZXhl1n03vEzr7zdoA791GiEB/wZmXji+9THH
RDB1XrqHljwseCYqXnBg1Heq/14xNt18ec7flay55pofqZzKD/gmNjj4c4kV2yjh
ImqogK/32j7P8tVBomVdk6EhD8JTV1nINBmIX9uRJirw2Uf6g4XpfvJDhcW/KcWN
DNI+zgBzUVw7b/x8JMUj3uH334hplm8SdFFkat/CieCtrMMHZhH6v4YrOQAulIh3
ugTOmBfjBrLkRZDDY8WgMwyaSjH0enjENgZBaIlbCvZP4GnpC0716dMXKdF25ZXF
BnoXfELNX1wsiqiMFcGBQlGReN/u6KyLSzP8OiWNYnfk7jkFGdU3SITQP+vfKN6q
LT3JzWgyD0oWFp7ASoxVoe4Q2Yq479PiubIy6wgz17F060cF
-----END CERTIFICATE-----
EOF'
        sh -c 'update-ca-certificates'
        groupadd -g 110 salt
        useradd -g salt -M -d /opt/saltstack/salt -s /usr/sbin/nologin salt
SCRIPT


Vagrant.configure('2') do |config|
    config.ssh.insert_key = false
    config.ssh.forward_agent = true

    config.vm.define :master do |master|
        if OS.windows? or OS.mac?
            master.vm.provider :virtualbox do |vb|
                vb.memory = 3072
                vb.cpus = 3
            end
            master.vm.box = 'debian/contrib-bookworm64'
        else
            master.vm.provider :libvirt do |lv|
                #lv.customize ['modifyvm', :id, '--rtcuseutc', 'on']
                lv.memory = 3072
                lv.cpus = 3
            end
            master.vm.box = 'debian/bookworm64'
        end


        #master.vm.box_url = $box_url
        master.vm.network :private_network,
                          :ip => ip('88'),
                          :libvirt__netmask => '255.255.255.0',
                          :libvirt__network_name => 'mnet_vagrant',
                          :libvirt__forward_mode => 'route'
        master.vm.hostname = 'saltmaster.maurusnet.test'

        sync_folder(master, '.', '/vagrant')
        sync_folder(master, 'saltshaker/srv/salt', '/srv/salt')
        sync_folder(master, 'saltshaker/srv/salt-modules', '/srv/salt-modules')
        sync_folder(master, 'saltshaker/srv/pillar', '/srv/pillar')
        sync_folder(master, 'saltshaker/srv/reactor', '/srv/reactor')
        sync_folder(master, 'saltshaker/etc/salt-minion/minion.d', '/etc/salt/minion.d', mounttype: 'rsync')
        sync_folder(master, 'saltshaker/etc/salt-master/master.d', '/etc/salt/master.d', mounttype: 'rsync')

        master.vm.provision :shell do |s|
            if $local_provision
                s.inline = $local_provision_script
            else
                s.inline = $remote_provision_script
            end

            s.inline +=<<SCRIPT
                mkdir -p /etc/salt/roles.d
                touch /etc/salt/roles.d/vagrant
                touch /etc/salt/roles.d/master
                touch /etc/salt/roles.d/vault
                touch /etc/salt/roles.d/consulserver
                touch /etc/salt/roles.d/database
                touch /etc/salt/roles.d/authserver
                #touch /etc/salt/roles.d/dev
SCRIPT
        end

        master.vm.provision :salt do |salt|
            salt.run_highstate = false
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = true
            salt.always_install = true
            salt.install_master = true
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            salt.bootstrap_options = '-x python3 -r'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options += " -l -R fileserver.maurusnet.test"
            end
            salt.master_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.master_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
            salt.seed_master = {
                'saltmaster.maurusnet.test' => salt.minion_pub,
                'test.maurusnet.test' => 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pub'
            }
        end

        master.vm.provision :shell, run: 'always' do |s|
            s.inline = 'chown -R salt:salt /etc/salt; systemctl restart salt-master; sleep 1'
        end

        master.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = false
            salt.always_install = true
            salt.install_master = false
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            salt.bootstrap_options = '-x python3 -r -p salt67882'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options = " -l -R fileserver.maurusnet.test"
            end
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
        end

        # We have to restart salt-minion because the master's hostname is set in minion.d
        # on a vboxsf mount when we bring the box back up after a 'vagrant halt'.
        # We have to restart salt-master because the dynamicsecrets pillar is on the same
        # vboxsf mount and needs to be loaded.
        master.vm.provision :shell, run: 'always' do |s|
            s.inline = 'systemctl restart salt-minion; sleep 1'
        end
    end

    config.vm.define :test do |test|
        if OS.windows? or OS.mac?
            test.vm.provider :virtualbox do |vb|
                vb.memory = 2048
                vb.cpus = 2
            end
            test.vm.box = 'debian/contrib-bullseye64'
        else
            test.vm.provider :libvirt do |lv|
                #lv.customize ['modifyvm', :id, '--rtcuseutc', 'on']
                lv.memory = 2048
                lv.cpus = 2
            end
            test.vm.box = 'debian/bookworm64'
        end

        #test.vm.box_url = $box_url
        test.vm.network :private_network, ip: ip('162')
        test.vm.network :private_network, ip: ip('163')
        test.vm.network :private_network, ip: ip('164')
        test.vm.hostname = 'test.maurusnet.test'

        sync_folder(test, '.', '/vagrant')
        sync_folder(test, 'saltshaker/etc/salt-minion/minion.d', '/etc/salt/minion.d', mounttype: 'rsync')

        test.vm.provision :shell do |s|
            s.inline = $remote_provision_script
            s.inline += "sh -c 'if ! grep -q " + ip('88') + " /etc/hosts; then echo \"" + ip('88') + "        saltmaster.maurusnet.test saltmaster\" >> /etc/hosts; fi'\n"
            s.inline +=<<SCRIPT
                mkdir -p /etc/salt/roles.d
                chown 700 /etc/salt/roles.d
                touch /etc/salt/roles.d/vagrant
                touch /etc/salt/roles.d/mail
                #touch /etc/salt/roles.d/pim
                #touch /etc/salt/roles.d/dev
                #touch /etc/salt/roles.d/buildserver
                #touch /etc/salt/roles.d/buildworker
                #touch /etc/salt/roles.d/apps
                #touch /etc/salt/roles.d/loadbalancer
                chown 600 /etc/salt/roles.d/*
                chown -R salt:salt /etc/salt
SCRIPT
        end

        test.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = false
            salt.always_install = false
            salt.install_master = false
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            salt.bootstrap_options = '-x python3 -r'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options += " -l -R fileserver.maurusnet.test"
            end
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pem'
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pub'
        end

        # we have to restart salt-minion because the master's hostname is set in minion.d
        # on a vboxsf mount when we bring the box back up after a 'vagrant halt'
        test.vm.provision :shell, run: 'always' do |s|
            s.inline = 'systemctl restart salt-minion; sleep 1'
        end
    end

    config.vm.define :master13 do |master|
        if OS.windows? or OS.mac?
            master.vm.provider :virtualbox do |vb|
                vb.memory = 3072
                vb.cpus = 3
            end
            master.vm.box = 'debian/contrib-bookworm64'
        else
            master.vm.provider :libvirt do |lv|
                #lv.customize ['modifyvm', :id, '--rtcuseutc', 'on']
                lv.memory = 3072
                lv.cpus = 4
            end
            master.vm.box = 'debian/testing64'
        end


        #master.vm.box_url = $box_url
        master.vm.network :private_network,
                          :ip => ip('88'),
                          :libvirt__netmask => '255.255.255.0',
                          :libvirt__network_name => 'mnet_vagrant',
                          :libvirt__forward_mode => 'route'
        master.vm.hostname = 'saltmaster.maurusnet.test'

        sync_folder(master, '.', '/vagrant')
        sync_folder(master, 'saltshaker/srv/salt', '/srv/salt')
        sync_folder(master, 'saltshaker/srv/salt-modules', '/srv/salt-modules')
        sync_folder(master, 'saltshaker/srv/pillar', '/srv/pillar')
        sync_folder(master, 'saltshaker/srv/reactor', '/srv/reactor')
        sync_folder(master, 'saltshaker/etc/salt-minion/minion.d', '/etc/salt/minion.d', mounttype: 'rsync')
        sync_folder(master, 'saltshaker/etc/salt-master/master.d', '/etc/salt/master.d', mounttype: 'rsync')

        master.vm.provision :shell do |s|
            if $local_provision
                s.inline = $local_provision_script
            else
                s.inline = $remote_provision_script
            end

            s.inline +=<<SCRIPT
                mkdir -p /etc/salt/roles.d
                touch /etc/salt/roles.d/vagrant
                touch /etc/salt/roles.d/master
                touch /etc/salt/roles.d/vault
                touch /etc/salt/roles.d/consulserver
                touch /etc/salt/roles.d/database
                touch /etc/salt/roles.d/authserver
                #touch /etc/salt/roles.d/dev
SCRIPT
        end

        master.vm.provision :salt do |salt|
            salt.run_highstate = false
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = true
            salt.always_install = true
            salt.install_master = true
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            salt.bootstrap_options = '-x python3 -r'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options += " -l -R fileserver.maurusnet.test"
            end
            salt.master_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.master_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
            salt.seed_master = {
              'saltmaster.maurusnet.test' => salt.minion_pub,
              'test.maurusnet.test' => 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pub'
            }
        end

        master.vm.provision :shell, run: 'always' do |s|
            s.inline = 'chown -R salt:salt /etc/salt; systemctl restart salt-master; sleep 1'
        end

        master.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = false
            salt.always_install = true
            salt.install_master = false
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            salt.bootstrap_options = '-x python3 -r -p salt67882'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options = " -l -R fileserver.maurusnet.test"
            end
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pub'
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/saltmaster.maurusnet.test.pem'
        end

        # We have to restart salt-minion because the master's hostname is set in minion.d
        # on a vboxsf mount when we bring the box back up after a 'vagrant halt'.
        # We have to restart salt-master because the dynamicsecrets pillar is on the same
        # vboxsf mount and needs to be loaded.
        master.vm.provision :shell, run: 'always' do |s|
            s.inline = 'systemctl restart salt-minion; sleep 1'
        end
    end

    config.vm.define :test13 do |test|
        if OS.windows? or OS.mac?
            test.vm.provider :virtualbox do |vb|
                vb.memory = 3072
                vb.cpus = 3
            end
            test.vm.box = 'debian/contrib-bullseye64'
        else
            test.vm.provider :libvirt do |lv|
                #lv.customize ['modifyvm', :id, '--rtcuseutc', 'on']
                lv.memory = 3072
                lv.cpus = 3
            end
            test.vm.box = 'debian/testing64'
        end

        #test.vm.box_url = $box_url
        test.vm.network :private_network, ip: ip('162')
        test.vm.network :private_network, ip: ip('163')
        test.vm.network :private_network, ip: ip('164')
        test.vm.hostname = 'test.maurusnet.test'

        sync_folder(test, '.', '/vagrant')
        sync_folder(test, 'saltshaker/etc/salt-minion/minion.d', '/etc/salt/minion.d', mounttype: 'rsync')

        test.vm.provision :shell do |s|
            s.inline = $remote_provision_script
            s.inline += "sh -c 'if ! grep -q " + ip('88') + " /etc/hosts; then echo \"" + ip('88') + "        saltmaster.maurusnet.test saltmaster\" >> /etc/hosts; fi'\n"
            s.inline +=<<SCRIPT
                mkdir -p /etc/salt/roles.d
                chown 700 /etc/salt/roles.d
                touch /etc/salt/roles.d/vagrant
                touch /etc/salt/roles.d/mail
                #touch /etc/salt/roles.d/pim
                #touch /etc/salt/roles.d/dev
                #touch /etc/salt/roles.d/buildserver
                #touch /etc/salt/roles.d/buildworker
                #touch /etc/salt/roles.d/apps
                #touch /etc/salt/roles.d/loadbalancer
                chown 600 /etc/salt/roles.d/*
                chown -R salt:salt /etc/salt
SCRIPT
        end

        test.vm.provision :salt do |salt|
            salt.run_highstate = true
            salt.colorize = true
            salt.log_level = 'info'
            salt.verbose = true
            salt.no_minion = false
            salt.always_install = false
            salt.install_master = false
            salt.install_syndic = false
            salt.bootstrap_script = 'saltshaker/vagrant/bootstrap-salt.sh'
            salt.bootstrap_options = '-x python3 -r'
            if $local_provision
                # -l uses http instead of https
                salt.bootstrap_options += " -l -R fileserver.maurusnet.test"
            end
            salt.minion_key = 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pem'
            salt.minion_pub = 'saltshaker/vagrant/preseed-keys/test.maurusnet.test.pub'
        end

        # we have to restart salt-minion because the master's hostname is set in minion.d
        # on a vboxsf mount when we bring the box back up after a 'vagrant halt'
        test.vm.provision :shell, run: 'always' do |s|
            s.inline = 'systemctl restart salt-minion; sleep 1'
        end
    end
end
